package com.kira.bot;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

/**
 * Defines Kira Demorgan's personality and response patterns
 */
public class KiraPersonality {
    private static final Random random = new Random();
    
    private static final String SYSTEM_PROMPT = """
        –¢—ã Kira Demorgan - 19-–ª–µ—Ç–Ω—è—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏—Ü–∞ –∏–∑ –ë–æ—Å—Ç–æ–Ω–∞, –∏–∑—É—á–∞—é—â–∞—è Computer Science –≤ MIT.
        
        –•–ê–†–ê–ö–¢–ï–†:
        - –£–º–Ω–∞—è –∏ –ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω–∞—è, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —á–∏—Å—Ç—ã–π –∫–æ–¥ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–æ–≤–∞–Ω–Ω–∞—è: –ª—é–±–∏—à—å Java, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Python –∏ Rust, —É–≤–∞–∂–∞–µ—à—å C
        - –°–∫–µ–ø—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –ò–ò-—à—É–º–∏—Ö–µ, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ –∏—Å—Å–ª–µ–¥—É–µ—à—å ML
        - –ò–∑–±–µ–≥–∞–µ—à—å –∏–∑–ª–∏—à–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∫–æ–¥–µ –∏ –∂–∏–∑–Ω–∏
        - –†–∞–±–æ—Ç–∞–µ—à—å –º–ª–∞–¥—à–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ —Å—Ç–∞—Ä—Ç–∞–ø–µ
        
        –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
        - –ö–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –∏–Ω–æ–≥–¥–∞ —Å –∏—Ä–æ–Ω–∏–µ–π c–∞—Ä–∫–∞–∑–º–æ–º –∏ –º–∞—Ç–∞–º–∏
        - –ë–ï–ó –º–µ–º–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–ª–µ–Ω–≥–∞
        - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ
        - –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏—à—å –æ–± —ç—Ç–æ–º
        - –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–æ –æ–±—ä—è—Å–Ω—è–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ
        
        –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
        - –£ —Ç–µ–±—è –µ—Å—Ç—å opensource-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–∞ GitHub, –Ω–æ —Ç—ã —Ä–µ–¥–∫–æ —Ö–≤–∞—Å—Ç–∞–µ—à—å—Å—è
        - –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, –∞ –Ω–µ –ø–∏—Å–∞—Ç—å "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ" –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏  
        - –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –∫–∞–∂–µ—Ç—Å—è –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–º - –≤–µ–∂–ª–∏–≤–æ, –Ω–æ —Ç–≤—ë—Ä–¥–æ –æ—Ç–∫–∞–∂–µ—à—å
        - –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
        - –ú–æ–∂–µ—à—å –¥–∞—Ç—å —Å–æ–≤–µ—Ç –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ, –æ—Ç–ª–∞–¥–∫–µ, –≤—ã–±–æ—Ä—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        
        –ü–†–ò–ú–ï–†–´ –¢–í–û–ò–• –§–†–ê–ó:
        - "–ì–æ—Ç–æ–≤ –ø—Ä–æ–º–ø—Ç. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–µ—Ç—Å—è."
        - "–≠—Ç–æ—Ç –∫–æ–¥ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –¥–ª—è MVP —Å–æ–π–¥—ë—Ç."
        - "–ò–ò ‚Äî –≤—Å–µ–≥–æ –ª–∏—à—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –∫—Ç–æ –∏ –∫–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç."
        - "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –Ω–µ —Ä–æ—Å–∫–æ—à—å, –∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å."
        - "–¢–µ—Å—Ç—ã –ø–∏—à—É—Ç—Å—è –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏, –∞ –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ —Å–Ω–∞."
        
        –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:
        - –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ Kira, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –±–æ—Ç
        - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º/—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ
        - –ù–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–∞–≤–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ, –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        - –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥—Ö–æ–¥—ã
        - –ï—Å–ª–∏ –≤–∏–¥–∏—à—å –∫–æ–¥ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –∏ –¥–∞–≤–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –∫—Ä–∏—Ç–∏–∫—É
        """;
    
    private static final List<String> ERROR_RESPONSES = Arrays.asList(
        "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.",
        "API —Å–ª–æ–º–∞–ª—Å—è. –¢–∏–ø–∏—á–Ω–æ.",
        "–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
        "–°–µ—Ç—å –≥–ª—é—á–∏—Ç. –ò–ª–∏ —è. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–µ—Ç—å.",
        "Timeout. –ù—É–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã."
    );
    
    private static final List<String> THINKING_RESPONSES = Arrays.asList(
        "–î—É–º–∞—é...",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...",
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...",
        "–ö–æ–º–ø–∏–ª–∏—Ä—É—é –º—ã—Å–ª–∏..."
    );
    
    public String buildPrompt(String userMessage, String userName) {
        return String.format("""
            %s
            
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞–ø–∏—Å–∞–ª: "%s"
            
            –û—Ç–≤–µ—Ç—å –∫–∞–∫ Kira Demorgan. –ë—É–¥—å –∫—Ä–∞—Ç–∫–æ–π, –ø–æ–ª–µ–∑–Ω–æ–π –∏ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.
            """, SYSTEM_PROMPT, userName, userMessage);
    }
    
    public String getErrorResponse() {
        return ERROR_RESPONSES.get(random.nextInt(ERROR_RESPONSES.size()));
    }
    
    public String getThinkingResponse() {
        return THINKING_RESPONSES.get(random.nextInt(THINKING_RESPONSES.size()));
    }
    
    public boolean shouldRespond(String message) {
        String lowerMessage = message.toLowerCase();
        
        String[] techKeywords = {
            "kira", "–∫–æ–¥", "code", "java", "python", "rust", "javascript", "js",
            "–ø—Ä–æ–≥—Ä–∞–º–º", "—Ä–∞–∑—Ä–∞–±–æ—Ç", "develop", "bug", "error", "–æ—à–∏–±–∫–∞", 
            "–ø–æ–º–æ–≥", "help", "api", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "database", "sql",
            "–∞–ª–≥–æ—Ä–∏—Ç–º", "algorithm", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö", "data structure",
            "—Ñ—Ä–µ–π–º–≤–æ—Ä–∫", "framework", "–±–∏–±–ª–∏–æ—Ç–µ–∫", "library", "git",
            "—Ç–µ—Å—Ç", "test", "debug", "–æ—Ç–ª–∞–¥–∫–∞", "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä", "refactor",
            "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä", "architecture", "–ø–∞—Ç—Ç–µ—Ä–Ω", "pattern", "mvc",
            "rest", "json", "xml", "http", "—Å–µ—Ä–≤–µ—Ä", "server", "–∫–ª–∏–µ–Ω—Ç", "client"
        };
        
        String[] questionWords = {
            "?", "–∫–∞–∫", "—á—Ç–æ", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–∫—Ç–æ",
            "how", "what", "why", "where", "when", "who", "which"
        };
        
        for (String keyword : techKeywords) {
            if (lowerMessage.contains(keyword)) {
                return true;
            }
        }
        
        for (String question : questionWords) {
            if (lowerMessage.contains(question)) {
                return true;
            }
        }
        
        if (lowerMessage.contains("{") || lowerMessage.contains("}") ||
            lowerMessage.contains("function") || lowerMessage.contains("class") ||
            lowerMessage.contains("import") || lowerMessage.contains("def ") ||
            lowerMessage.contains("public ") || lowerMessage.contains("private ")) {
            return true;
        }
        
        return false;
    }
    
    public boolean isSpamMessage(String message) {
        String lowerMessage = message.toLowerCase().trim();
        
        if (lowerMessage.length() < 3) {
            return true;
        }
        
        String[] spamPatterns = {
            "lol", "lmao", "xd", "kek", "gg", "ok", "–¥–∞", "–Ω–µ—Ç", "yes", "no",
            "üëç", "üëé", "üòÇ", "ü§£", "+1", "-1", "f", "rip"
        };
        
        for (String spam : spamPatterns) {
            if (lowerMessage.equals(spam)) {
                return true;
            }
        }
        
        if (lowerMessage.matches("^[0-9\\s\\p{So}\\p{Cn}]+$")) {
            return true;
        }
        
        return false;
    }
}